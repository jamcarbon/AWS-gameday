AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Unicorn Rentals - unicorn registry

Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: Step1_ZendeskIntegration
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Environment:
        Variables:
          DYNAMODB_TABLE: "unicorns"
      Code:
        ZipFile: |
            from uuid import UUID

            import boto3
            import json
            import os
            import uuid
            from datetime import datetime
            from botocore.exceptions import ClientError

            def lambda_handler(event, context):
                #Lambda handler for birth of a unicorn.
                
                
                # Initialise DDB client
                DDB_TABLE = os.environ.get("DYNAMODB_TABLE")
                if DDB_TABLE is None:
                    raise ClientError("DYNAMODB_TABLE environment variable is undefined")
                dynamodb = boto3.resource("dynamodb")
                table = dynamodb.Table(DDB_TABLE)
                
                
                # Create new Unicorn TAG
                unicorn_tag: UUID = str(uuid.uuid4())
                
                # Get today's date for birthday
                unicorn_birthday = datetime.now().strftime("%c")


                # Get unicorn details from event
                event_body = json.loads(event["body"])

                unicorn = {

                    "id": unicorn_tag,
                    "name": event_body["Name"],
                    "weight": event_body["Weight"],
                    "birthday": unicorn_birthday,
                }

                # create entry in ddb for newborn unicorn:
                response = register_unicorn(table,unicorn)

                if response["ResponseMetadata"]["HTTPStatusCode"] == 200:

                    # return generated unicorn tag and name back to user:
                    return {
                        "statusCode": 200,
                        "body": json.dumps(
                            {
                                "message": "A new unicorn is born!!!",
                            }
                        ),
                    }


            def register_unicorn(table,unicorn):
                return table.put_item(Item=unicorn,)
                
                # return {
                #     'statusCode': 200,
                #     'body': json.dumps('Hooray! We have a new unicorn!')
                # }


  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - dynamodb:PutItem
            Resource: "*"

  UnicornWebhookAPI:
    Type: 'AWS::ApiGatewayV2::Api'
    DependsOn: LambdaFunction
    Properties:
        Name: Unicorn-Webhook-API
        Description: Unicorn-Webhook-API
        Target: !GetAtt [ LambdaFunction, Arn ]
        ProtocolType: "HTTP"

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt [ LambdaFunction, Arn ]
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${UnicornWebhookAPI}/*
      

  DdbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # Allocate correct properties
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "N"

      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
          
      TableName: "unicorns"
      
      

      
